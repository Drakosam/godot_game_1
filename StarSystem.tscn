[gd_scene load_steps=5 format=2]

[ext_resource path="res://GlobalEntities/Game_Setings.tscn" type="PackedScene" id=1]
[ext_resource path="res://GlobalEntities/CargoEntities.tscn" type="PackedScene" id=2]

[sub_resource type="GDScript" id=2]
script/source = "extends Area2D

var system_name = \"no_name\"
var rand_string = \"abcdefghijklmnopqrstuvwxyz1234567890\".to_upper()
var is_selcted = false
var is_active = false
var sys_dif = 500

var rng = RandomNumberGenerator.new()

var star_link_nw = null
var star_link_ne = null
var star_link_e = null
var star_link_w = null
var star_link_sw = null
var star_link_se = null

var star_system_nw = null
var star_system_ne = null
var star_system_e = null
var star_system_w = null
var star_system_sw = null
var star_system_se = null

var system_size = 17
var link_known = 0
var max_links = 0

signal clear_selected()
signal system_selected(system)


func _ready():
	$CollisionShape2D.shape.radius = system_size
	system_name = generate_word(rand_string,4)+\"-\"+generate_word(rand_string,4)
	system_name += \"-\"+generate_word(rand_string,3)


func generate_word(chars, length):
	var word=\"\"
	var n_char = len(chars)
	for _i in range(length):
		word += chars[randi()% n_char]
	return word


func _draw():
	if not is_active:
		draw_circle(Vector2(0,0),system_size,Color('#000000'))
		return
		
	if is_selcted:
		draw_circle(Vector2(0,0),system_size,Color('#ff0000'))
	else:
		draw_circle(Vector2(0,0),system_size,Color('#ffffff'))


func _on_StarSystem_input_event(_viewport, event, _shape_idx):
	if event is InputEventMouseButton and event.pressed:
		select_system()


func _update_system_conection(star_system,star_link):
	if star_system:
		if not star_system.is_active:
			star_link.visible = true
			star_system.make_active()
			star_system.link_known+=1
			self.link_known+=1
		elif star_system.is_active and star_link.visible == false:
			star_link.visible = true
			self.link_known+=1
			star_system.link_known+=1


########## public metods
func clear_all_paths():
	if star_link_nw:
		star_link_nw.unmark_path()
	if star_link_ne:
		star_link_ne.unmark_path()
	if star_link_e:
		star_link_e.unmark_path()
	if star_link_w:
		star_link_w.unmark_path()
	if star_link_se:
		star_link_se.unmark_path()
	if star_link_sw:
		star_link_sw.unmark_path()


func mark_path(path_name):
	if star_link_nw and path_name==\"NW\":
		star_link_nw.mark_path()
	
	if star_link_ne and path_name==\"NE\":
		star_link_ne.mark_path()
	
	if star_link_e and path_name==\"E\":
		star_link_e.mark_path()
	
	if star_link_w and path_name==\"W\":
		star_link_w.mark_path()
	
	if star_link_se and path_name==\"SE\":
		star_link_se.mark_path()
		
	if star_link_sw and path_name==\"SW\":
		star_link_sw.mark_path()


func select_system():
	emit_signal(\"clear_selected\")
	is_selcted = true
	update()
	emit_signal(\"system_selected\",self)


func set_name(new_name):
	system_name = new_name


func system_discaver(_sensor_str = 0):
	if link_known >= max_links:
		return
	
	rng.randomize()
	var dice = rng.randi_range(0, 500)
	
	var dif_test_lvl = $Game_Setings.SYSTEM_BASE_DIF 
	dif_test_lvl +=  link_known *  $Game_Setings.SYSTEM_NEXT_LINK_DIF_STEP
	
	if _sensor_str + dice < dif_test_lvl:
		return
	
	var dis_tab = []
	
	if star_link_nw and not star_link_nw.visible:
		dis_tab.append('NW')

	if star_link_ne and not  star_link_ne.visible:
		dis_tab.append('NE')

	if star_link_e and not  star_link_e.visible:
		dis_tab.append('E')

	if star_link_w and not  star_link_w.visible:
		dis_tab.append('W')

	if star_link_sw and not  star_link_sw.visible:
		dis_tab.append('SW')
		
	if star_link_se and not  star_link_se.visible:
		dis_tab.append('SE')
	
	
	
	rng.randomize()
	var link_detected = rng.randi_range(0,dis_tab.size()-1)
	_show_link(dis_tab[link_detected])
		

func _show_link(link_name):
	if link_name == 'NW':
		_update_system_conection(star_system_nw, star_link_nw)
	if link_name == 'NE':
		_update_system_conection(star_system_ne, star_link_ne)
	if link_name == 'W':
		_update_system_conection(star_system_w, star_link_w)
	if link_name == 'E':
		_update_system_conection(star_system_e, star_link_e)
	if link_name == 'SW':
		_update_system_conection(star_system_sw, star_link_sw)
	if link_name == 'SE':
		_update_system_conection(star_system_se, star_link_se)

func act():
	if not is_active:
		return


func make_active():
	is_active = true
	visible = true
	update()
	

func harvest_resorce_from_system(_site_nr = 0):
	rng.randomize()
	return [{
		'name':'common resorce',
		'count':rng.randi_range(100, 500),
		'size': $CargoEntities.get_entiti_size('common resorce')
	}]


func make_not_active():
	visible =not $Game_Setings.HIDE_INACTIVE_SYSTEMS
	if star_link_nw:
		star_link_nw.visible = false
		max_links += 1
	
	if star_link_ne:
		star_link_ne.visible = false
		max_links += 1
	
	if star_link_e:
		star_link_e.visible = false
		max_links += 1
	
	if star_link_w:
		star_link_w.visible = false
		max_links += 1
	
	if star_link_se:
		star_link_se.visible = false
		max_links += 1
		
	if star_link_sw:
		star_link_sw.visible = false
		max_links += 1


func deselect_system():
	is_selcted = false
	update()


func randomize_posytion(dis_x,dis_y):
	rng.randomize()
	position.x += rng.randi_range((dis_x-system_size)*(-1), dis_x-system_size)
	position.y += rng.randi_range((dis_y-system_size)*(-1), dis_y-system_size) 


func get_visible_paths():
	var visible_paths = {}

	if star_link_nw:
		visible_paths[\"NW\"] = [star_link_nw.visible, star_system_nw.system_name]
	else:
		visible_paths[\"NW\"] = [false,\"xxxx\"]

	if star_link_ne:
		visible_paths[\"NE\"] = [star_link_ne.visible, star_system_ne.system_name]
	else:
		visible_paths[\"NE\"] = [false,\"xxxx\"]

	if star_link_e:
		visible_paths[\"E\"] = [star_link_e.visible, star_system_e.system_name]
	else:
		visible_paths[\"E\"] = [false,\"xxxx\"]

	if star_link_w:
		visible_paths[\"W\"] = [star_link_w.visible, star_system_w.system_name]
	else:
		visible_paths[\"W\"] = [false,\"xxxx\"]

	if star_link_sw:
		visible_paths[\"SW\"] = [star_link_sw.visible, star_system_sw.system_name]
	else:
		visible_paths[\"SW\"] = [false,\"xxxx\"]
		
	if star_link_se:
		visible_paths[\"SE\"] = [star_link_se.visible, star_system_se.system_name]
	else:
		visible_paths[\"SE\"] = [false,\"xxxx\"]
	
	return visible_paths
"

[sub_resource type="CircleShape2D" id=1]

[node name="StarSystem" type="Area2D"]
script = SubResource( 2 )

[node name="Game_Setings" parent="." instance=ExtResource( 1 )]

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 1 )

[node name="CargoEntities" parent="." instance=ExtResource( 2 )]

[connection signal="input_event" from="." to="." method="_on_StarSystem_input_event"]
