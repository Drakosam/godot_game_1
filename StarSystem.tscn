[gd_scene load_steps=3 format=2]

[sub_resource type="GDScript" id=2]
script/source = "extends Area2D

var system_name = \"no_name\"
var rand_string = \"abcdefghijklmnopqrstuvwxyz1234567890\".to_upper()
var is_selcted = false
var is_active = false
var rng = RandomNumberGenerator.new()

var star_link_nw = null
var star_link_ne = null
var star_link_e = null
var star_link_w = null
var star_link_sw = null
var star_link_se = null

var star_system_nw = null
var star_system_ne = null
var star_system_e = null
var star_system_w = null
var star_system_sw = null
var star_system_se = null

var system_size = 17
var link_known = 0

signal clear_selected()
signal system_selected(system)

func _ready():
	$CollisionShape2D.shape.radius = system_size
	system_name = generate_word(rand_string,4)+\"-\"+generate_word(rand_string,4)
	system_name += \"-\"+generate_word(rand_string,3)
func generate_word(chars, length):
	var word: String
	var n_char = len(chars)
	for i in range(length):
		word += chars[randi()% n_char]
	return word

func _draw():
	if not is_active:
		draw_circle(Vector2(0,0),system_size,Color('#000000'))
		return

	if is_selcted:
		draw_circle(Vector2(0,0),system_size,Color('#ff0000'))
	else:
		draw_circle(Vector2(0,0),system_size,Color('#ffffff'))


func _on_StarSystem_input_event(_viewport, event, _shape_idx):
	if event is InputEventMouseButton and event.pressed:
		select_system()


func _update_system_conection(star_system,star_link):
	if star_system:
		if not star_system.is_active:
			star_link.visible = true
			star_system.make_active()
			star_system.link_known+=1
			self.link_known+=1
		elif star_system.is_active and star_link.visible == false:
			star_link.visible = true
			self.link_known+=1
			star_system.link_known+=1


########## public metods
func select_system():
	emit_signal(\"clear_selected\")
	is_selcted = true
	update()
	emit_signal(\"system_selected\",self)


func set_name(new_name):
	system_name = new_name


func system_discaver():
	if link_known > 5:
		return

	rng.randomize()
	var xxx = rng.randi_range(0,500)

	if xxx <5:
		_update_system_conection(star_system_nw, star_link_nw)
	elif 4< xxx and xxx <10:
		_update_system_conection(star_system_ne, star_link_ne)
	elif 9<xxx and xxx <15:
		_update_system_conection(star_system_w, star_link_w)
	elif 14<xxx and xxx <20:
		_update_system_conection(star_system_e, star_link_e)
	elif 19<xxx and xxx <25:
		_update_system_conection(star_system_sw, star_link_sw)
	elif 24<xxx and xxx <30:
		_update_system_conection(star_system_se, star_link_se)


func act():
	if not is_active:
		return


func make_active():
	is_active = true
	visible = true
	update()


func make_not_active():
	visible = false
	if star_link_nw:
		star_link_nw.visible = false
	if star_link_ne:
		star_link_ne.visible = false
	if star_link_e:
		star_link_e.visible = false
	if star_link_w:
		star_link_w.visible = false
	if star_link_se:
		star_link_se.visible = false
	if star_link_sw:
		star_link_sw.visible = false


func deselect_system():
		is_selcted = false
		update()


func randomize_posytion(dis_x,dis_y):
	rng.randomize()
	position.x += rng.randi_range((dis_x-system_size)*(-1), dis_x-system_size)
	position.y += rng.randi_range((dis_y-system_size)*(-1), dis_y-system_size)
"

[sub_resource type="CircleShape2D" id=1]

[node name="StarSystem" type="Area2D"]
script = SubResource( 2 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 1 )

[connection signal="input_event" from="." to="." method="_on_StarSystem_input_event"]
