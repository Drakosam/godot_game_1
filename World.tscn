[gd_scene load_steps=6 format=2]

[ext_resource path="res://Ship_panel.tscn" type="PackedScene" id=1]
[ext_resource path="res://Star_System_panel.tscn" type="PackedScene" id=2]
[ext_resource path="res://Game_Setings.tscn" type="PackedScene" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D


var StarSystam = preload(\"res://StarSystem.tscn\")
var StarLink = preload(\"res://StarLink.tscn\")
var ShipAktor = preload(\"res://ShipAktor.tscn\")

var system_list = []
var star_systems_grid=[]

var dist_x = 80
var dist_y = 50
var base_dist = 15

var board_size_x =0 
var board_size_y =0 

var ship_list = []

func _ready():
	board_size_x = $Game_Setings.SIZE_X
	board_size_y = $Game_Setings.SIZE_Y
	
	create_board(board_size_x,board_size_y)
	
	var start_system = star_systems_grid[floor(board_size_y/2) ][floor(board_size_x/2)]
	start_system.make_active()
	$Camera2D.position = start_system.position
	
	var new_ship = ShipAktor.instance()
	ship_list.append(new_ship)
	new_ship.spown_ship(start_system,'start ship')
	
	start_system.select_system()
	
	$CanvasLayer/Panel/Ship_panel.set_ship(new_ship)
	$CanvasLayer/Panel/MenuButton.get_popup().add_item(\"Star System\")
	$CanvasLayer/Panel/MenuButton.get_popup().add_item(\"Ships\")
	$CanvasLayer/Panel/MenuButton.get_popup().connect(\"index_pressed\",self,'_pick_options')


func _pick_options(option):
	if option == 0:
		_hide_panels()
		$CanvasLayer/Panel/MenuButton.text = \"Star System ▼▼▼ \\\\/\\\\/\\\\/\"
		$CanvasLayer/Panel/Star_System_panel.visible = true
	elif option ==1:
		_hide_panels()
		$CanvasLayer/Panel/MenuButton.text = \"Ships ▼▼▼ \\\\/\\\\/\\\\/\"
		$CanvasLayer/Panel/Ship_panel.visible = true
		
func _hide_panels():
	$CanvasLayer/Panel/Star_System_panel.visible = false
	$CanvasLayer/Panel/Ship_panel.visible = false
	

func clear_system_selected():
	for system in system_list:
		system.deselect_system()


func system_selected(system):
	$CanvasLayer/Panel/Star_System_panel.set_system(system)


func create_board(size_x,size_y):
	for y in size_y:
		var system_line = []
		for x in size_x:
			var new_system = StarSystam.instance()

			new_system.position = Vector2(base_dist+x*dist_x*2 +dist_x*(y%2),base_dist+y*dist_y*2)
			new_system.connect('clear_selected',self,'clear_system_selected')
			new_system.connect('system_selected',self,'system_selected')
			
			if $Game_Setings.RANDOMIZE_SYSTEM_POSYTION:
				new_system.randomize_posytion(dist_x, dist_y)
			
			system_line.append(new_system)
			system_list.append(new_system)
			
		star_systems_grid.append(system_line)
	
	update_star_links()
	for system in system_list:
		system.make_not_active()
		add_child(system)


func update_star_links():
	for pos_y in len(star_systems_grid):
		for pos_x in len(star_systems_grid[pos_y]) -1:
			var s_link = StarLink.instance()
			var s_sys = star_systems_grid[pos_y][pos_x]
			var e_sys = star_systems_grid[pos_y][pos_x+1]
			
			s_link.set_link(s_sys, e_sys)
			
			s_sys.star_link_e =s_link
			e_sys.star_link_w = s_link
			
			s_sys.star_system_e = e_sys
			e_sys.star_system_w= s_sys
			
			add_child(s_link)
	
	for pos_y in range(1,len(star_systems_grid)) :
		for pos_x in len(star_systems_grid[pos_y]):
			var s_link = StarLink.instance()
			
			
			s_link.set_link(star_systems_grid[pos_y][pos_x],star_systems_grid[pos_y-1][pos_x])
			if pos_y % 2 == 1:
				star_systems_grid[pos_y-1][pos_x].star_link_se = s_link
				star_systems_grid[pos_y][pos_x].star_link_nw =s_link
				
				star_systems_grid[pos_y][pos_x].star_system_nw = star_systems_grid[pos_y-1][pos_x]
				star_systems_grid[pos_y-1][pos_x].star_system_se = star_systems_grid[pos_y][pos_x]
			else:
				star_systems_grid[pos_y-1][pos_x].star_link_sw = s_link
				star_systems_grid[pos_y][pos_x].star_link_ne =s_link
				
				star_systems_grid[pos_y][pos_x].star_system_ne = star_systems_grid[pos_y-1][pos_x]
				star_systems_grid[pos_y-1][pos_x].star_system_sw = star_systems_grid[pos_y][pos_x]
			add_child(s_link)
	
	for pos_y in range(1,len(star_systems_grid)) :
		for pos_x in len(star_systems_grid[pos_y]) -1:
			if pos_y % 2 == 1:
				var s_link = StarLink.instance()
				s_link.set_link(star_systems_grid[pos_y][pos_x],star_systems_grid[pos_y-1][pos_x+1])
				
				star_systems_grid[pos_y][pos_x].star_link_ne =s_link
				star_systems_grid[pos_y-1][pos_x+1].star_link_sw = s_link
				
				star_systems_grid[pos_y][pos_x].star_system_ne = star_systems_grid[pos_y-1][pos_x+1]
				star_systems_grid[pos_y-1][pos_x+1].star_system_sw = star_systems_grid[pos_y][pos_x]
				
				add_child(s_link)

	for pos_y in range(1,len(star_systems_grid)) :
		for pos_x in range(1,len(star_systems_grid[pos_y])):
			if pos_y % 2 == 0:
				var s_link = StarLink.instance()
				s_link.set_link(star_systems_grid[pos_y][pos_x],star_systems_grid[pos_y-1][pos_x-1])
				
				star_systems_grid[pos_y][pos_x].star_link_nw =s_link
				star_systems_grid[pos_y-1][pos_x-1].star_link_se = s_link
				
				star_systems_grid[pos_y][pos_x].star_system_nw = star_systems_grid[pos_y-1][pos_x-1]
				star_systems_grid[pos_y-1][pos_x-1].star_system_se = star_systems_grid[pos_y][pos_x]
				add_child(s_link)


func _on_Timer_timeout():
	for system in system_list:
		system.act()
	
	for ship in ship_list:
		ship.act()
"

[sub_resource type="GDScript" id=2]
script/source = "extends Camera2D


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


func _unhandled_input(event):
	if event is InputEventMouseMotion:
		if event.button_mask == BUTTON_MASK_MIDDLE:
			position -= event.relative
"

[node name="World" type="Node2D"]
script = SubResource( 1 )

[node name="Game_Setings" parent="." instance=ExtResource( 3 )]

[node name="Camera2D" type="Camera2D" parent="."]
current = true
script = SubResource( 2 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="Panel" type="Panel" parent="CanvasLayer"]
anchor_bottom = 1.0
margin_right = 300.0

[node name="MenuButton" type="MenuButton" parent="CanvasLayer/Panel"]
anchor_right = 1.0
margin_bottom = 30.0
text = "Star system  ▼▼▼ \\/\\/\\/"

[node name="Star_System_panel" parent="CanvasLayer/Panel" instance=ExtResource( 2 )]
margin_top = 40.0

[node name="Ship_panel" parent="CanvasLayer/Panel" instance=ExtResource( 1 )]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = 40.0
margin_right = 0.0
margin_bottom = 0.0

[node name="HSeparator" type="HSeparator" parent="CanvasLayer/Panel"]
anchor_right = 1.0
margin_top = 30.0
margin_bottom = 34.0

[node name="Timer" type="Timer" parent="."]
wait_time = 0.25
autostart = true

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
